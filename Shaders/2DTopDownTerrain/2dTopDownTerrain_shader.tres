[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

uniform float heighest_landmass = 1.0;
uniform float lowest_landmass = 0.0;
uniform float landmass = 1.0;
uniform float density = 5.0;
uniform float seed = 1337.0;
uniform vec2 iResolution = vec2(64,64);
uniform float uni_radius = 100.0f;
uniform vec4 color_1 : hint_color = vec4(0.77,0.90,0.98,1.0);
uniform vec4 color_2 : hint_color = vec4(0.82,0.92,0.99,1.0);
uniform vec4 color_3 : hint_color = vec4(0.91,0.97,0.99,1.0);
uniform vec4 color_4 : hint_color = vec4(0.62,0.75,0.59,1.0);
uniform vec4 color_5 : hint_color = vec4(0.86,0.90,0.68,1.0);
uniform vec4 color_6 : hint_color = vec4(0.99,0.99,0.63,1.0);
uniform vec4 color_7 : hint_color = vec4(0.99,0.83,0.59,1.0);
uniform vec4 color_8 : hint_color = vec4(0.98,0.71,0.49,1.0); 
uniform vec4 color_9 : hint_color = vec4(0.98,0.57,0.47,1.0);
uniform vec4 color_10 : hint_color = vec4(0.79,0.48,0.43,1.0); 

float noise (vec3 n) 
{ 
	return fract(sin(dot(n, vec3(95.43583, 93.323197, 94.993431))) * 65536.32);
}

float perlin_a (vec3 n)
{
    vec3 base = floor(n * 64.0) * 0.015625;
    vec3 dd = vec3(0.015625, 0.0, 0.0);
    float a = noise(base);
    float b = noise(base + dd.xyy);
    float c = noise(base + dd.yxy);
    float d = noise(base + dd.xxy);
    vec3 p = (n - base) * 64.0;
    float t = mix(a, b, p.x);
    float tt = mix(c, d, p.x);
    return mix(t, tt, p.y);
}

float perlin_b (vec3 n)
{
    vec3 base = vec3(n.x, n.y, floor(n.z * 64.0) * 0.015625);
    vec3 dd = vec3(0.015625, 0.0, 0.0);
    vec3 p = (n - base) *  64.0;
    float front = perlin_a(base + dd.yyy);
    float back = perlin_a(base + dd.yyx);
    return mix(front, back, p.z);
}

float fbm(vec3 n)
{
    float total = 0.0;
    float m1 = 1.0;
    float m2 = 0.1;
    for (int i = 0; i < 5; i++)
    {
        total += perlin_b(n * m1) * m2;
        m2 *= 2.0;
        m1 *= 0.5;
    }
    return total;
}

vec3 heightmap (vec3 n)
{
	return vec3(fbm((5.0 * n) + fbm((5.0 * n) * 3.0 - 1000.0) * 0.05),0,0);
}

vec4 PixelShaderFunction(vec2 coords)   
{
    float dx = coords.x - 0.5f;
    float dy = coords.y - 0.5f;
    if(dx * dx + dy * dy <= 0.25f)
        return vec4(1.0, 0.0, 0.0, 1.0);
    else
        return vec4(0.0, 0.0, 0.0, 0.0);
}

void fragment()
{
	vec2 position = UV;
	float pi = 3.14;
	float distance_to_center = distance(position, vec2(0.5,0.5));
	
	//vec2 uv = (2.0*FRAGCOORD.xy - iResolution.xy)/iResolution.y;
	//float t = floor(TIME*0.9);
	float _color = clamp(vec4(vec3((heightmap(vec3(UV.xy*density,seed)*0.02)-landmass)),1.0).r,lowest_landmass,heighest_landmass);
    
	if (distance_to_center<uni_radius)
	{
		if (_color<0.1) COLOR=color_1;
		else
		if (_color<0.2) COLOR=color_2;
		else
		if (_color<0.3) COLOR=color_3;
		else
		if (_color<0.55) COLOR=color_4;
		else
		if (_color<0.65) COLOR=color_5;
		else
		if (_color<0.75) COLOR=color_6;
		else
		if (_color<0.85) COLOR=color_7;
		else
		if (_color<0.95) COLOR=color_8;     
		else
		if (_color<0.99) COLOR=color_9;        
		else      
		COLOR=color_10;
	 }
	else
	{
		COLOR.a = 0.0f;
	}
}"
